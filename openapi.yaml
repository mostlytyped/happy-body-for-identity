openapi: 3.0.0
info:
  title: Happy Body API
  description: Open API spec for the Happy Body app
  version: 0.1

# Paths
paths:
  # Sign up/in paths
  /sign-up:
    post:
      summary: Sign up
      description: Creates a user in the database and returns a user and JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpIn"
      responses:
        "201":
          $ref: "#/components/responses/AuthUserResponse"
        "400":
          description: A user with that email already exists. Or, a username and password are required.
  /sign-in:
    post:
      summary: Sign in
      description: Verifies credentials and returns a user and JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpIn"
      responses:
        "200":
          $ref: "#/components/responses/AuthUserResponse"
        "400":
          description: A user with that email does not exist. Or, a username and password are required. Or, username and password do not match.
  # User paths
  /users/{userId}:
    get:
      summary: Get user
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/UserMismatchingIds"
        "404":
          description: "User not found."
    post:
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/UserMismatchingIds"
  # Measurement paths
  /users/{userId}/measurements:
    get:
      summary: Get measurements
      description: Get measurements for a user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: An array of measurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Measurement"
        "400":
          $ref: "#/components/responses/UserMismatchingIds"
    post:
      summary: Create measurement
      description: Create a measurement for a user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "201":
          description: A measurement
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Measurement"
        "400":
          description: Measurement values are of the correct type. Or, user IDs do not match.
  /users/{userId}/measurements/{measurementId}:
    delete:
      summary: Delete measurement
      description: Delete a measurement for a user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
        - name: measurementId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted measurement successfully.
          content:
            application/json:
              schema:
                type: object
                  properties:
                    id:
                      type: string
        "400":
          $ref: "#/components/responses/UserMismatchingIds"

# Components
components:
  # securitySchemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  # schemas
  schemas:
    SignUpIn:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthUser:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        idealWeight:
          type: integer
        measurementSystem:
          type: string
        baseDumbbellWeight:
          type: integer
      required:
        - id
        - email
    UpdateUser:
      type: object
      properties:
        idealWeight:
          type: integer
        measurementSystem:
          type: string
        baseDumbbellWeight:
          type: integer
    Measurement:
      type: object
      properties:
        id:
          type: string
        date:
          type: string # date ISO
        weight:
          type: integer
        chest:
          type: integer
        belly:
          type: integer
        thigh:
          type: integer
      required:
        - id
        - date
        - weight
        - chest
        - belly
        - thigh

  # parameters
  parameters:
    userIdParam:
      name: userId
      in: path
      required: true
      schema:
        type: string
  # responses
  responses:
    AuthUserResponse:
      description: An object with a token and user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthUser"
    UserResponse:
      description: A user.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserMismatchingIds:
      description: "User IDs do not match."
